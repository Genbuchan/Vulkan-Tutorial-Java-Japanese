diff --git a/Ch20IndexBuffer.java b/Ch21DescriptorLayout.java
index 3ac7afe..53506a1 100644
--- a/Ch20IndexBuffer.java
+++ b/Ch21DescriptorLayout.java
@@ -1,15 +1,13 @@
 package javavulkantutorial;
 
 import javavulkantutorial.ShaderSPIRVUtils.SPIRV;
-import org.joml.Vector2f;
-import org.joml.Vector2fc;
-import org.joml.Vector3f;
-import org.joml.Vector3fc;
+import org.joml.*;
 import org.lwjgl.PointerBuffer;
 import org.lwjgl.system.MemoryStack;
 import org.lwjgl.system.Pointer;
 import org.lwjgl.vulkan.*;
 
+import java.lang.Math;
 import java.nio.ByteBuffer;
 import java.nio.IntBuffer;
 import java.nio.LongBuffer;
@@ -33,7 +31,7 @@ import static org.lwjgl.vulkan.KHRSurface.*;
 import static org.lwjgl.vulkan.KHRSwapchain.*;
 import static org.lwjgl.vulkan.VK10.*;
 
-public class Ch20IndexBuffer {
+public class Ch21DescriptorLayout {
 
     private static class HelloTriangleApplication {
 
@@ -117,6 +115,21 @@ public class Ch20IndexBuffer {
 
         }
 
+        private static class UniformBufferObject {
+
+            private static final int SIZEOF = 3 * 16 * Float.BYTES;
+
+            private Matrix4f model;
+            private Matrix4f view;
+            private Matrix4f proj;
+
+            public UniformBufferObject() {
+                model = new Matrix4f();
+                view = new Matrix4f();
+                proj = new Matrix4f();
+            }
+        }
+
         private static class Vertex {
 
             private static final int SIZEOF = (2 + 3) * Float.BYTES;
@@ -200,6 +213,7 @@ public class Ch20IndexBuffer {
         private List<Long> swapChainFramebuffers;
 
         private long renderPass;
+        private long descriptorSetLayout;
         private long pipelineLayout;
         private long graphicsPipeline;
 
@@ -207,10 +221,12 @@ public class Ch20IndexBuffer {
 
         private long vertexBuffer;
         private long vertexBufferMemory;
-
         private long indexBuffer;
         private long indexBufferMemory;
 
+        private List<Long> uniformBuffers;
+        private List<Long> uniformBuffersMemory;
+
         private List<VkCommandBuffer> commandBuffers;
 
         private List<Frame> inFlightFrames;
@@ -235,7 +251,6 @@ public class Ch20IndexBuffer {
             }
 
             glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API);
-            glfwWindowHint(GLFW_RESIZABLE, GLFW_TRUE);
 
             String title = getClass().getEnclosingClass().getSimpleName();
 
@@ -269,6 +284,7 @@ public class Ch20IndexBuffer {
             createCommandPool();
             createVertexBuffer();
             createIndexBuffer();
+            createDescriptorSetLayout();
             createSwapChainObjects();
             createSyncObjects();
         }
@@ -286,6 +302,9 @@ public class Ch20IndexBuffer {
 
         private void cleanupSwapChain() {
 
+            uniformBuffers.forEach(ubo -> vkDestroyBuffer(device, ubo, null));
+            uniformBuffersMemory.forEach(uboMemory -> vkFreeMemory(device, uboMemory, null));
+
             swapChainFramebuffers.forEach(framebuffer -> vkDestroyFramebuffer(device, framebuffer, null));
 
             vkFreeCommandBuffers(device, commandPool, asPointerBuffer(commandBuffers));
@@ -305,6 +324,8 @@ public class Ch20IndexBuffer {
 
             cleanupSwapChain();
 
+            vkDestroyDescriptorSetLayout(device, descriptorSetLayout, null);
+
             vkDestroyBuffer(device, indexBuffer, null);
             vkFreeMemory(device, indexBufferMemory, null);
 
@@ -362,6 +383,7 @@ public class Ch20IndexBuffer {
             createRenderPass();
             createGraphicsPipeline();
             createFramebuffers();
+            createUniformBuffers();
             createCommandBuffers();
         }
 
@@ -695,14 +717,38 @@ public class Ch20IndexBuffer {
             }
         }
 
+        private void createDescriptorSetLayout() {
+
+            try(MemoryStack stack = stackPush()) {
+
+                VkDescriptorSetLayoutBinding.Buffer uboLayoutBinding = VkDescriptorSetLayoutBinding.callocStack(1, stack);
+                uboLayoutBinding.binding(0);
+                uboLayoutBinding.descriptorCount(1);
+                uboLayoutBinding.descriptorType(VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER);
+                uboLayoutBinding.pImmutableSamplers(null);
+                uboLayoutBinding.stageFlags(VK_SHADER_STAGE_VERTEX_BIT);
+
+                VkDescriptorSetLayoutCreateInfo layoutInfo = VkDescriptorSetLayoutCreateInfo.callocStack(stack);
+                layoutInfo.sType(VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO);
+                layoutInfo.pBindings(uboLayoutBinding);
+
+                LongBuffer pDescriptorSetLayout = stack.mallocLong(1);
+
+                if(vkCreateDescriptorSetLayout(device, layoutInfo, null, pDescriptorSetLayout) != VK_SUCCESS) {
+                    throw new RuntimeException("Failed to create descriptor set layout");
+                }
+                descriptorSetLayout = pDescriptorSetLayout.get(0);
+            }
+        }
+
         private void createGraphicsPipeline() {
 
             try(MemoryStack stack = stackPush()) {
 
                 // Let's compile the GLSL shaders into SPIR-V at runtime using the shaderc library
                 // Check ShaderSPIRVUtils class to see how it can be done
-                SPIRV vertShaderSPIRV = compileShaderFile("shaders/17_shader_vertexbuffer.vert", VERTEX_SHADER);
-                SPIRV fragShaderSPIRV = compileShaderFile("shaders/17_shader_vertexbuffer.frag", FRAGMENT_SHADER);
+                SPIRV vertShaderSPIRV = compileShaderFile("shaders/21_shader_ubo.vert", VERTEX_SHADER);
+                SPIRV fragShaderSPIRV = compileShaderFile("shaders/21_shader_ubo.frag", FRAGMENT_SHADER);
 
                 long vertShaderModule = createShaderModule(vertShaderSPIRV.bytecode());
                 long fragShaderModule = createShaderModule(fragShaderSPIRV.bytecode());
@@ -794,6 +840,7 @@ public class Ch20IndexBuffer {
 
                 VkPipelineLayoutCreateInfo pipelineLayoutInfo = VkPipelineLayoutCreateInfo.callocStack(stack);
                 pipelineLayoutInfo.sType(VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO);
+                pipelineLayoutInfo.pSetLayouts(stack.longs(descriptorSetLayout));
 
                 LongBuffer pPipelineLayout = stack.longs(VK_NULL_HANDLE);
 
@@ -970,6 +1017,30 @@ public class Ch20IndexBuffer {
             }
         }
 
+        private void createUniformBuffers() {
+
+            try(MemoryStack stack = stackPush()) {
+
+                uniformBuffers = new ArrayList<>(swapChainImages.size());
+                uniformBuffersMemory = new ArrayList<>(swapChainImages.size());
+
+                LongBuffer pBuffer = stack.mallocLong(1);
+                LongBuffer pBufferMemory = stack.mallocLong(1);
+
+                for(int i = 0;i < swapChainImages.size();i++) {
+                    createBuffer(UniformBufferObject.SIZEOF,
+                            VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT,
+                            VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT | VK_MEMORY_PROPERTY_HOST_COHERENT_BIT,
+                            pBuffer,
+                            pBufferMemory);
+
+                    uniformBuffers.add(pBuffer.get(0));
+                    uniformBuffersMemory.add(pBufferMemory.get(0));
+                }
+
+            }
+        }
+
         private void createBuffer(long size, int usage, int properties, LongBuffer pBuffer, LongBuffer pBufferMemory) {
 
             try(MemoryStack stack = stackPush()) {
@@ -1060,6 +1131,15 @@ public class Ch20IndexBuffer {
             buffer.rewind();
         }
 
+        private void memcpy(ByteBuffer buffer, UniformBufferObject ubo) {
+
+            final int mat4Size = 16 * Float.BYTES;
+
+            ubo.model.get(0, buffer);
+            ubo.view.get(mat4Size, buffer);
+            ubo.proj.get(mat4Size * 2, buffer);
+        }
+
         private int findMemoryType(int typeFilter, int properties) {
 
             VkPhysicalDeviceMemoryProperties memProperties = VkPhysicalDeviceMemoryProperties.mallocStack();
@@ -1183,6 +1263,27 @@ public class Ch20IndexBuffer {
             }
         }
 
+        private void updateUniformBuffer(int currentImage) {
+
+            try(MemoryStack stack = stackPush()) {
+
+                UniformBufferObject ubo = new UniformBufferObject();
+
+                ubo.model.rotate((float) (glfwGetTime() * Math.toRadians(90)), 0.0f, 0.0f, 1.0f);
+                ubo.view.lookAt(2.0f, 2.0f, 2.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f);
+                ubo.proj.perspective((float) Math.toRadians(45),
+                        (float)swapChainExtent.width() / (float)swapChainExtent.height(), 0.1f, 10.0f);
+                ubo.proj.m11(ubo.proj.m11() * -1);
+
+                PointerBuffer data = stack.mallocPointer(1);
+                vkMapMemory(device, uniformBuffersMemory.get(currentImage), 0, UniformBufferObject.SIZEOF, 0, data);
+                {
+                    memcpy(data.getByteBuffer(0, UniformBufferObject.SIZEOF), ubo);
+                }
+                vkUnmapMemory(device, uniformBuffersMemory.get(currentImage));
+            }
+        }
+
         private void drawFrame() {
 
             try(MemoryStack stack = stackPush()) {
@@ -1205,6 +1306,8 @@ public class Ch20IndexBuffer {
 
                 final int imageIndex = pImageIndex.get(0);
 
+                updateUniformBuffer(imageIndex);
+
                 if(imagesInFlight.containsKey(imageIndex)) {
                     vkWaitForFences(device, imagesInFlight.get(imageIndex).fence(), true, UINT64_MAX);
                 }
